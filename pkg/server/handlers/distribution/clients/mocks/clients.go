// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-sigma/sigma/pkg/server/handlers/distribution/clients (interfaces: Clients)
//
// Generated by this command:
//
//	mockgen -destination=mocks/clients.go -package=mocks github.com/go-sigma/sigma/pkg/server/handlers/distribution/clients Clients
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	distribution "github.com/distribution/distribution/v3"
	digest "github.com/opencontainers/go-digest"
	v1 "github.com/opencontainers/image-spec/specs-go/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockClients is a mock of Clients interface.
type MockClients struct {
	ctrl     *gomock.Controller
	recorder *MockClientsMockRecorder
	isgomock struct{}
}

// MockClientsMockRecorder is the mock recorder for MockClients.
type MockClientsMockRecorder struct {
	mock *MockClients
}

// NewMockClients creates a new mock instance.
func NewMockClients(ctrl *gomock.Controller) *MockClients {
	mock := &MockClients{ctrl: ctrl}
	mock.recorder = &MockClientsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClients) EXPECT() *MockClientsMockRecorder {
	return m.recorder
}

// AuthToken mocks base method.
func (m *MockClients) AuthToken() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthToken")
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthToken indicates an expected call of AuthToken.
func (mr *MockClientsMockRecorder) AuthToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthToken", reflect.TypeOf((*MockClients)(nil).AuthToken))
}

// DoRequest mocks base method.
func (m *MockClients) DoRequest(ctx context.Context, method, path string, headers http.Header, bodyReaders ...io.Reader) (int, http.Header, io.ReadCloser, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, method, path, headers}
	for _, a := range bodyReaders {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DoRequest", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(http.Header)
	ret2, _ := ret[2].(io.ReadCloser)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// DoRequest indicates an expected call of DoRequest.
func (mr *MockClientsMockRecorder) DoRequest(ctx, method, path, headers any, bodyReaders ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, method, path, headers}, bodyReaders...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoRequest", reflect.TypeOf((*MockClients)(nil).DoRequest), varargs...)
}

// GetBlob mocks base method.
func (m *MockClients) GetBlob(ctx context.Context, repository string, digest digest.Digest) (v1.Descriptor, io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlob", ctx, repository, digest)
	ret0, _ := ret[0].(v1.Descriptor)
	ret1, _ := ret[1].(io.ReadCloser)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBlob indicates an expected call of GetBlob.
func (mr *MockClientsMockRecorder) GetBlob(ctx, repository, digest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlob", reflect.TypeOf((*MockClients)(nil).GetBlob), ctx, repository, digest)
}

// GetManifest mocks base method.
func (m *MockClients) GetManifest(ctx context.Context, repository, reference string) (distribution.Manifest, v1.Descriptor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManifest", ctx, repository, reference)
	ret0, _ := ret[0].(distribution.Manifest)
	ret1, _ := ret[1].(v1.Descriptor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetManifest indicates an expected call of GetManifest.
func (mr *MockClientsMockRecorder) GetManifest(ctx, repository, reference any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManifest", reflect.TypeOf((*MockClients)(nil).GetManifest), ctx, repository, reference)
}

// HeadBlob mocks base method.
func (m *MockClients) HeadBlob(ctx context.Context, repository string, digest digest.Digest) (v1.Descriptor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadBlob", ctx, repository, digest)
	ret0, _ := ret[0].(v1.Descriptor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadBlob indicates an expected call of HeadBlob.
func (mr *MockClientsMockRecorder) HeadBlob(ctx, repository, digest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadBlob", reflect.TypeOf((*MockClients)(nil).HeadBlob), ctx, repository, digest)
}

// HeadManifest mocks base method.
func (m *MockClients) HeadManifest(ctx context.Context, repository, reference string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadManifest", ctx, repository, reference)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadManifest indicates an expected call of HeadManifest.
func (mr *MockClientsMockRecorder) HeadManifest(ctx, repository, reference any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadManifest", reflect.TypeOf((*MockClients)(nil).HeadManifest), ctx, repository, reference)
}

// PutBlob mocks base method.
func (m *MockClients) PutBlob(ctx context.Context, repository string, digest digest.Digest, content io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBlob", ctx, repository, digest, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutBlob indicates an expected call of PutBlob.
func (mr *MockClientsMockRecorder) PutBlob(ctx, repository, digest, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBlob", reflect.TypeOf((*MockClients)(nil).PutBlob), ctx, repository, digest, content)
}
