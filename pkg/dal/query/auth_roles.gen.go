// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/go-sigma/sigma/pkg/dal/models"
)

func newAuthRole(db *gorm.DB, opts ...gen.DOOption) authRole {
	_authRole := authRole{}

	_authRole.authRoleDo.UseDB(db, opts...)
	_authRole.authRoleDo.UseModel(&models.AuthRole{})

	tableName := _authRole.authRoleDo.TableName()
	_authRole.ALL = field.NewAsterisk(tableName)
	_authRole.CreatedAt = field.NewInt64(tableName, "created_at")
	_authRole.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_authRole.DeletedAt = field.NewUint64(tableName, "deleted_at")
	_authRole.ID = field.NewString(tableName, "ulid,maxsize:26,primaryKey")
	_authRole.RoleID = field.NewString(tableName, "role_id")
	_authRole.ScopeValue = field.NewString(tableName, "scope_value")
	_authRole.ScopeType = field.NewField(tableName, "scope_type")
	_authRole.UserID = field.NewString(tableName, "user_id")
	_authRole.Role = authRoleBelongsToRole{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Role", "models.AuthRule"),
	}

	_authRole.User = authRoleBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "models.User"),
	}

	_authRole.fillFieldMap()

	return _authRole
}

type authRole struct {
	authRoleDo authRoleDo

	ALL        field.Asterisk
	CreatedAt  field.Int64
	UpdatedAt  field.Int64
	DeletedAt  field.Uint64
	ID         field.String
	RoleID     field.String
	ScopeValue field.String
	ScopeType  field.Field
	UserID     field.String
	Role       authRoleBelongsToRole

	User authRoleBelongsToUser

	fieldMap map[string]field.Expr
}

func (a authRole) Table(newTableName string) *authRole {
	a.authRoleDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a authRole) As(alias string) *authRole {
	a.authRoleDo.DO = *(a.authRoleDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *authRole) updateTableName(table string) *authRole {
	a.ALL = field.NewAsterisk(table)
	a.CreatedAt = field.NewInt64(table, "created_at")
	a.UpdatedAt = field.NewInt64(table, "updated_at")
	a.DeletedAt = field.NewUint64(table, "deleted_at")
	a.ID = field.NewString(table, "ulid,maxsize:26,primaryKey")
	a.RoleID = field.NewString(table, "role_id")
	a.ScopeValue = field.NewString(table, "scope_value")
	a.ScopeType = field.NewField(table, "scope_type")
	a.UserID = field.NewString(table, "user_id")

	a.fillFieldMap()

	return a
}

func (a *authRole) WithContext(ctx context.Context) *authRoleDo { return a.authRoleDo.WithContext(ctx) }

func (a authRole) TableName() string { return a.authRoleDo.TableName() }

func (a authRole) Alias() string { return a.authRoleDo.Alias() }

func (a authRole) Columns(cols ...field.Expr) gen.Columns { return a.authRoleDo.Columns(cols...) }

func (a *authRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *authRole) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 10)
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["ulid,maxsize:26,primaryKey"] = a.ID
	a.fieldMap["role_id"] = a.RoleID
	a.fieldMap["scope_value"] = a.ScopeValue
	a.fieldMap["scope_type"] = a.ScopeType
	a.fieldMap["user_id"] = a.UserID

}

func (a authRole) clone(db *gorm.DB) authRole {
	a.authRoleDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a authRole) replaceDB(db *gorm.DB) authRole {
	a.authRoleDo.ReplaceDB(db)
	return a
}

type authRoleBelongsToRole struct {
	db *gorm.DB

	field.RelationField
}

func (a authRoleBelongsToRole) Where(conds ...field.Expr) *authRoleBelongsToRole {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a authRoleBelongsToRole) WithContext(ctx context.Context) *authRoleBelongsToRole {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a authRoleBelongsToRole) Session(session *gorm.Session) *authRoleBelongsToRole {
	a.db = a.db.Session(session)
	return &a
}

func (a authRoleBelongsToRole) Model(m *models.AuthRole) *authRoleBelongsToRoleTx {
	return &authRoleBelongsToRoleTx{a.db.Model(m).Association(a.Name())}
}

type authRoleBelongsToRoleTx struct{ tx *gorm.Association }

func (a authRoleBelongsToRoleTx) Find() (result *models.AuthRule, err error) {
	return result, a.tx.Find(&result)
}

func (a authRoleBelongsToRoleTx) Append(values ...*models.AuthRule) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a authRoleBelongsToRoleTx) Replace(values ...*models.AuthRule) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a authRoleBelongsToRoleTx) Delete(values ...*models.AuthRule) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a authRoleBelongsToRoleTx) Clear() error {
	return a.tx.Clear()
}

func (a authRoleBelongsToRoleTx) Count() int64 {
	return a.tx.Count()
}

type authRoleBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a authRoleBelongsToUser) Where(conds ...field.Expr) *authRoleBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a authRoleBelongsToUser) WithContext(ctx context.Context) *authRoleBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a authRoleBelongsToUser) Session(session *gorm.Session) *authRoleBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a authRoleBelongsToUser) Model(m *models.AuthRole) *authRoleBelongsToUserTx {
	return &authRoleBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

type authRoleBelongsToUserTx struct{ tx *gorm.Association }

func (a authRoleBelongsToUserTx) Find() (result *models.User, err error) {
	return result, a.tx.Find(&result)
}

func (a authRoleBelongsToUserTx) Append(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a authRoleBelongsToUserTx) Replace(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a authRoleBelongsToUserTx) Delete(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a authRoleBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a authRoleBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

type authRoleDo struct{ gen.DO }

func (a authRoleDo) Debug() *authRoleDo {
	return a.withDO(a.DO.Debug())
}

func (a authRoleDo) WithContext(ctx context.Context) *authRoleDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a authRoleDo) ReadDB() *authRoleDo {
	return a.Clauses(dbresolver.Read)
}

func (a authRoleDo) WriteDB() *authRoleDo {
	return a.Clauses(dbresolver.Write)
}

func (a authRoleDo) Session(config *gorm.Session) *authRoleDo {
	return a.withDO(a.DO.Session(config))
}

func (a authRoleDo) Clauses(conds ...clause.Expression) *authRoleDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a authRoleDo) Returning(value interface{}, columns ...string) *authRoleDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a authRoleDo) Not(conds ...gen.Condition) *authRoleDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a authRoleDo) Or(conds ...gen.Condition) *authRoleDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a authRoleDo) Select(conds ...field.Expr) *authRoleDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a authRoleDo) Where(conds ...gen.Condition) *authRoleDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a authRoleDo) Order(conds ...field.Expr) *authRoleDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a authRoleDo) Distinct(cols ...field.Expr) *authRoleDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a authRoleDo) Omit(cols ...field.Expr) *authRoleDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a authRoleDo) Join(table schema.Tabler, on ...field.Expr) *authRoleDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a authRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) *authRoleDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a authRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) *authRoleDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a authRoleDo) Group(cols ...field.Expr) *authRoleDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a authRoleDo) Having(conds ...gen.Condition) *authRoleDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a authRoleDo) Limit(limit int) *authRoleDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a authRoleDo) Offset(offset int) *authRoleDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a authRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *authRoleDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a authRoleDo) Unscoped() *authRoleDo {
	return a.withDO(a.DO.Unscoped())
}

func (a authRoleDo) Create(values ...*models.AuthRole) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a authRoleDo) CreateInBatches(values []*models.AuthRole, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a authRoleDo) Save(values ...*models.AuthRole) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a authRoleDo) First() (*models.AuthRole, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.AuthRole), nil
	}
}

func (a authRoleDo) Take() (*models.AuthRole, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.AuthRole), nil
	}
}

func (a authRoleDo) Last() (*models.AuthRole, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.AuthRole), nil
	}
}

func (a authRoleDo) Find() ([]*models.AuthRole, error) {
	result, err := a.DO.Find()
	return result.([]*models.AuthRole), err
}

func (a authRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.AuthRole, err error) {
	buf := make([]*models.AuthRole, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a authRoleDo) FindInBatches(result *[]*models.AuthRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a authRoleDo) Attrs(attrs ...field.AssignExpr) *authRoleDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a authRoleDo) Assign(attrs ...field.AssignExpr) *authRoleDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a authRoleDo) Joins(fields ...field.RelationField) *authRoleDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a authRoleDo) Preload(fields ...field.RelationField) *authRoleDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a authRoleDo) FirstOrInit() (*models.AuthRole, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.AuthRole), nil
	}
}

func (a authRoleDo) FirstOrCreate() (*models.AuthRole, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.AuthRole), nil
	}
}

func (a authRoleDo) FindByPage(offset int, limit int) (result []*models.AuthRole, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a authRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a authRoleDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a authRoleDo) Delete(models ...*models.AuthRole) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *authRoleDo) withDO(do gen.Dao) *authRoleDo {
	a.DO = *do.(*gen.DO)
	return a
}
