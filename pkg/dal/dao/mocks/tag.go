// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-sigma/sigma/pkg/dal/dao (interfaces: TagService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/tag.go -package=mocks github.com/go-sigma/sigma/pkg/dal/dao TagService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dao "github.com/go-sigma/sigma/pkg/dal/dao"
	models "github.com/go-sigma/sigma/pkg/dal/models"
	types "github.com/go-sigma/sigma/pkg/types"
	enums "github.com/go-sigma/sigma/pkg/types/enums"
	gomock "go.uber.org/mock/gomock"
)

// MockTagService is a mock of TagService interface.
type MockTagService struct {
	ctrl     *gomock.Controller
	recorder *MockTagServiceMockRecorder
	isgomock struct{}
}

// MockTagServiceMockRecorder is the mock recorder for MockTagService.
type MockTagServiceMockRecorder struct {
	mock *MockTagService
}

// NewMockTagService creates a new mock instance.
func NewMockTagService(ctrl *gomock.Controller) *MockTagService {
	mock := &MockTagService{ctrl: ctrl}
	mock.recorder = &MockTagServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagService) EXPECT() *MockTagServiceMockRecorder {
	return m.recorder
}

// CountByArtifact mocks base method.
func (m *MockTagService) CountByArtifact(ctx context.Context, artifactIDs []int64) (map[int64]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByArtifact", ctx, artifactIDs)
	ret0, _ := ret[0].(map[int64]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByArtifact indicates an expected call of CountByArtifact.
func (mr *MockTagServiceMockRecorder) CountByArtifact(ctx, artifactIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByArtifact", reflect.TypeOf((*MockTagService)(nil).CountByArtifact), ctx, artifactIDs)
}

// CountByNamespace mocks base method.
func (m *MockTagService) CountByNamespace(ctx context.Context, namespaceIDs []int64) (map[int64]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByNamespace", ctx, namespaceIDs)
	ret0, _ := ret[0].(map[int64]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByNamespace indicates an expected call of CountByNamespace.
func (mr *MockTagServiceMockRecorder) CountByNamespace(ctx, namespaceIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByNamespace", reflect.TypeOf((*MockTagService)(nil).CountByNamespace), ctx, namespaceIDs)
}

// CountByRepositories mocks base method.
func (m *MockTagService) CountByRepositories(ctx context.Context, repositoryIDs []int64) (map[int64]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByRepositories", ctx, repositoryIDs)
	ret0, _ := ret[0].(map[int64]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByRepositories indicates an expected call of CountByRepositories.
func (mr *MockTagServiceMockRecorder) CountByRepositories(ctx, repositoryIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByRepositories", reflect.TypeOf((*MockTagService)(nil).CountByRepositories), ctx, repositoryIDs)
}

// CountByRepository mocks base method.
func (m *MockTagService) CountByRepository(ctx context.Context, repositoryID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByRepository", ctx, repositoryID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByRepository indicates an expected call of CountByRepository.
func (mr *MockTagServiceMockRecorder) CountByRepository(ctx, repositoryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByRepository", reflect.TypeOf((*MockTagService)(nil).CountByRepository), ctx, repositoryID)
}

// Create mocks base method.
func (m *MockTagService) Create(ctx context.Context, tag *models.Tag, options ...dao.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, tag}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTagServiceMockRecorder) Create(ctx, tag any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, tag}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTagService)(nil).Create), varargs...)
}

// DeleteByArtifactID mocks base method.
func (m *MockTagService) DeleteByArtifactID(ctx context.Context, artifactID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByArtifactID", ctx, artifactID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByArtifactID indicates an expected call of DeleteByArtifactID.
func (mr *MockTagServiceMockRecorder) DeleteByArtifactID(ctx, artifactID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByArtifactID", reflect.TypeOf((*MockTagService)(nil).DeleteByArtifactID), ctx, artifactID)
}

// DeleteByID mocks base method.
func (m *MockTagService) DeleteByID(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockTagServiceMockRecorder) DeleteByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockTagService)(nil).DeleteByID), ctx, id)
}

// DeleteByName mocks base method.
func (m *MockTagService) DeleteByName(ctx context.Context, repositoryID int64, tag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByName", ctx, repositoryID, tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByName indicates an expected call of DeleteByName.
func (mr *MockTagServiceMockRecorder) DeleteByName(ctx, repositoryID, tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByName", reflect.TypeOf((*MockTagService)(nil).DeleteByName), ctx, repositoryID, tag)
}

// FindWithDayCursor mocks base method.
func (m *MockTagService) FindWithDayCursor(ctx context.Context, repositoryID int64, day, limit int, last int64) ([]*models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWithDayCursor", ctx, repositoryID, day, limit, last)
	ret0, _ := ret[0].([]*models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWithDayCursor indicates an expected call of FindWithDayCursor.
func (mr *MockTagServiceMockRecorder) FindWithDayCursor(ctx, repositoryID, day, limit, last any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWithDayCursor", reflect.TypeOf((*MockTagService)(nil).FindWithDayCursor), ctx, repositoryID, day, limit, last)
}

// FindWithQuantityCursor mocks base method.
func (m *MockTagService) FindWithQuantityCursor(ctx context.Context, repositoryID int64, quantity, limit int, last int64) ([]*models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWithQuantityCursor", ctx, repositoryID, quantity, limit, last)
	ret0, _ := ret[0].([]*models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWithQuantityCursor indicates an expected call of FindWithQuantityCursor.
func (mr *MockTagServiceMockRecorder) FindWithQuantityCursor(ctx, repositoryID, quantity, limit, last any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWithQuantityCursor", reflect.TypeOf((*MockTagService)(nil).FindWithQuantityCursor), ctx, repositoryID, quantity, limit, last)
}

// GetByArtifactID mocks base method.
func (m *MockTagService) GetByArtifactID(ctx context.Context, repositoryID, artifactID int64) (*models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByArtifactID", ctx, repositoryID, artifactID)
	ret0, _ := ret[0].(*models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByArtifactID indicates an expected call of GetByArtifactID.
func (mr *MockTagServiceMockRecorder) GetByArtifactID(ctx, repositoryID, artifactID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByArtifactID", reflect.TypeOf((*MockTagService)(nil).GetByArtifactID), ctx, repositoryID, artifactID)
}

// GetByID mocks base method.
func (m *MockTagService) GetByID(ctx context.Context, tagID int64) (*models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, tagID)
	ret0, _ := ret[0].(*models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTagServiceMockRecorder) GetByID(ctx, tagID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTagService)(nil).GetByID), ctx, tagID)
}

// GetByName mocks base method.
func (m *MockTagService) GetByName(ctx context.Context, repositoryID int64, tag string) (*models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, repositoryID, tag)
	ret0, _ := ret[0].(*models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockTagServiceMockRecorder) GetByName(ctx, repositoryID, tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockTagService)(nil).GetByName), ctx, repositoryID, tag)
}

// Incr mocks base method.
func (m *MockTagService) Incr(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Incr", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Incr indicates an expected call of Incr.
func (mr *MockTagServiceMockRecorder) Incr(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockTagService)(nil).Incr), ctx, id)
}

// ListByDtPagination mocks base method.
func (m *MockTagService) ListByDtPagination(ctx context.Context, repository string, limit int, lastID ...int64) ([]*models.Tag, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, repository, limit}
	for _, a := range lastID {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListByDtPagination", varargs...)
	ret0, _ := ret[0].([]*models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByDtPagination indicates an expected call of ListByDtPagination.
func (mr *MockTagServiceMockRecorder) ListByDtPagination(ctx, repository, limit any, lastID ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, repository, limit}, lastID...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByDtPagination", reflect.TypeOf((*MockTagService)(nil).ListByDtPagination), varargs...)
}

// ListTag mocks base method.
func (m *MockTagService) ListTag(ctx context.Context, repositoryID int64, name *string, types []enums.ArtifactType, pagination types.Pagination, sort types.Sortable) ([]*models.Tag, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTag", ctx, repositoryID, name, types, pagination, sort)
	ret0, _ := ret[0].([]*models.Tag)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTag indicates an expected call of ListTag.
func (mr *MockTagServiceMockRecorder) ListTag(ctx, repositoryID, name, types, pagination, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTag", reflect.TypeOf((*MockTagService)(nil).ListTag), ctx, repositoryID, name, types, pagination, sort)
}
