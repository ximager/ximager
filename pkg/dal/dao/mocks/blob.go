// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-sigma/sigma/pkg/dal/dao (interfaces: BlobService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/blob.go -package=mocks github.com/go-sigma/sigma/pkg/dal/dao BlobService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/go-sigma/sigma/pkg/dal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockBlobService is a mock of BlobService interface.
type MockBlobService struct {
	ctrl     *gomock.Controller
	recorder *MockBlobServiceMockRecorder
	isgomock struct{}
}

// MockBlobServiceMockRecorder is the mock recorder for MockBlobService.
type MockBlobServiceMockRecorder struct {
	mock *MockBlobService
}

// NewMockBlobService creates a new mock instance.
func NewMockBlobService(ctrl *gomock.Controller) *MockBlobService {
	mock := &MockBlobService{ctrl: ctrl}
	mock.recorder = &MockBlobServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlobService) EXPECT() *MockBlobServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBlobService) Create(ctx context.Context, blob *models.Blob) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, blob)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBlobServiceMockRecorder) Create(ctx, blob any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBlobService)(nil).Create), ctx, blob)
}

// DeleteByID mocks base method.
func (m *MockBlobService) DeleteByID(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockBlobServiceMockRecorder) DeleteByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockBlobService)(nil).DeleteByID), ctx, id)
}

// Exists mocks base method.
func (m *MockBlobService) Exists(ctx context.Context, digest string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, digest)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockBlobServiceMockRecorder) Exists(ctx, digest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockBlobService)(nil).Exists), ctx, digest)
}

// FindAssociateWithArtifact mocks base method.
func (m *MockBlobService) FindAssociateWithArtifact(ctx context.Context, ids []int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAssociateWithArtifact", ctx, ids)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAssociateWithArtifact indicates an expected call of FindAssociateWithArtifact.
func (mr *MockBlobServiceMockRecorder) FindAssociateWithArtifact(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAssociateWithArtifact", reflect.TypeOf((*MockBlobService)(nil).FindAssociateWithArtifact), ctx, ids)
}

// FindByDigest mocks base method.
func (m *MockBlobService) FindByDigest(ctx context.Context, digest string) (*models.Blob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByDigest", ctx, digest)
	ret0, _ := ret[0].(*models.Blob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByDigest indicates an expected call of FindByDigest.
func (mr *MockBlobServiceMockRecorder) FindByDigest(ctx, digest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByDigest", reflect.TypeOf((*MockBlobService)(nil).FindByDigest), ctx, digest)
}

// FindByDigests mocks base method.
func (m *MockBlobService) FindByDigests(ctx context.Context, digests []string) ([]*models.Blob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByDigests", ctx, digests)
	ret0, _ := ret[0].([]*models.Blob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByDigests indicates an expected call of FindByDigests.
func (mr *MockBlobServiceMockRecorder) FindByDigests(ctx, digests any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByDigests", reflect.TypeOf((*MockBlobService)(nil).FindByDigests), ctx, digests)
}

// FindWithLastPull mocks base method.
func (m *MockBlobService) FindWithLastPull(ctx context.Context, before, last, limit int64) ([]*models.Blob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWithLastPull", ctx, before, last, limit)
	ret0, _ := ret[0].([]*models.Blob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWithLastPull indicates an expected call of FindWithLastPull.
func (mr *MockBlobServiceMockRecorder) FindWithLastPull(ctx, before, last, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWithLastPull", reflect.TypeOf((*MockBlobService)(nil).FindWithLastPull), ctx, before, last, limit)
}

// Incr mocks base method.
func (m *MockBlobService) Incr(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Incr", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Incr indicates an expected call of Incr.
func (mr *MockBlobServiceMockRecorder) Incr(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockBlobService)(nil).Incr), ctx, id)
}
